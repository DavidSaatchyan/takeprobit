import os
import asyncio
import nest_asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters, JobQueue
from importlib import reload
import config
import subprocess
import threading
from cex_connectors import get_exchange_connector
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_running = False
bot_process = None  # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
chat_id = None  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
async def send_message(message):
    if chat_id:
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        await application.bot.send_message(chat_id=chat_id, text=message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def update_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏" if not bot_running else "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")],
            [KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ P&L")],
        ],
        resize_keyboard=True
    )
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global chat_id
    chat_id = update.effective_chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
    await update_keyboard(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /config –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å Symbol", callback_data='change_SYMBOL')],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å Leverage", callback_data='change_LEVERAGE_SETTINGS')],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å Margin", callback_data='change_MARGIN')],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å TP Multiplier", callback_data='change_ATR_MULTIPLIER_TP')],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å SL Multiplier", callback_data='change_ATR_MULTIPLIER_SL')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    config_text = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"Symbol: {config.SYMBOL}\n"
        f"Leverage: {config.LEVERAGE_SETTINGS}\n"
        f"Margin: {config.MARGIN}\n"
        f"TP Multiplier: {config.ATR_MULTIPLIER_TP}\n"
        f"SL Multiplier: {config.ATR_MULTIPLIER_SL}"
    )
    await update.message.reply_text(config_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ callback_data —Å "change_"
    if query.data.startswith("change_"):
        setting_to_change = query.data.split('_', 1)[1]
        context.user_data['setting_to_change'] = setting_to_change
        await query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {setting_to_change}:")
    else:
        # –ï—Å–ª–∏ callback_data –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "change_", –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        await pnl_period_handler(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    setting = context.user_data.get('setting_to_change')

    if setting:
        try:
            new_value = int(text) if setting != "SYMBOL" else text
            with open('config.py', 'r') as file:
                lines = file.readlines()
            with open('config.py', 'w') as file:
                for line in lines:
                    if line.startswith(f"{setting} ="):
                        file.write(f"{setting} = '{new_value}'\n" if setting == "SYMBOL" else f"{setting} = {new_value}\n")
                    else:
                        file.write(line)
            reload(config)
            await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value}.")
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        context.user_data.pop('setting_to_change')
    else:
        if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await show_config(update, context)
        elif text == "üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏":
            await start_bot(update, context)
        elif text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é":
            await stop_bot(update, context)
        elif text == "üìä –ê–Ω–∞–ª–∏–∑ P&L":
            await analyze_pnl(update, context)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global bot_running, bot_process
    if not bot_running:
        bot_running = True
        bot_process = subprocess.Popen(["python", "bot_gc.py"])
        await update.message.reply_text("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        await update_keyboard(update, context)
    else:
        await update.message.reply_text("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
async def stop_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global bot_running, bot_process
    if bot_running:
        bot_running = False
        bot_process.terminate()
        bot_process = None
        await update.message.reply_text("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await update_keyboard(update, context)
    else:
        await update.message.reply_text("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ê–Ω–∞–ª–∏–∑ PnL
async def analyze_pnl(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    connector = get_exchange_connector()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    symbol = config.SYMBOL  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
    keyboard = [
        [InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data='pnl_1')],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='pnl_7')],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='pnl_30')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ P&L:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PnL
async def pnl_period_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ callback_data
    period = int(query.data.split('_')[1])
    connector = get_exchange_connector()
    symbol = config.SYMBOL

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ PnL –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    pnl_data = connector.get_pnl(symbol, income_type="REALIZED_PNL", days=period)

    if pnl_data:
        total_pnl = sum(float(item['income']) for item in pnl_data if item['incomeType'] == "REALIZED_PNL")
        message = f"üìä P&L –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period} –¥–Ω–µ–π:\n" \
                  f"–û–±—â–∏–π P&L: {total_pnl:.2f} USDT\n" \
                  f"–î–µ—Ç–∞–ª–∏:\n"
        for item in pnl_data:
            if item['incomeType'] == "REALIZED_PNL":
                message += f"- {item['time']}: {item['income']} {item['asset']}\n"
    else:
        message = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ P&L –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    await query.edit_message_text(text=message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^change_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    application.add_handler(CallbackQueryHandler(pnl_period_handler, pattern="^pnl_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PnL

    print("üîó –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await application.run_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())