import time
import asyncio
import sys
import threading
from cex_connectors import get_exchange_connector
from strategy_gc import generate_trading_setup
from config import MARGIN, EXECUTION_TIME_LIMIT, EXCHANGE, API_KEY, SECRET_KEY
import telegram_bot
from ws_bingx import BingXWebSocket

def get_time_to_next_candle():
    now = time.time()
    candle_interval = 60
    next_candle_time = ((int(now // candle_interval) + 1)) * candle_interval
    time_to_wait = next_candle_time - now + 2
    return time_to_wait

async def check_and_cancel_expired_order(connector, order_id, order_info, chat_id):
    await asyncio.sleep(3)

    while True:
        current_time = time.time()
        time_passed = current_time - order_info['open_time']
        
        open_orders_response = connector.get_open_orders(symbol=order_info['symbol'])
        open_orders = open_orders_response.get("data", {}).get("orders", [])
        order_exists = any(str(order.get("orderId")) == order_id for order in open_orders)

        if not order_exists:
            return

        if time_passed > EXECUTION_TIME_LIMIT and order_info['type'] == "LIMIT":
            cancel_response = connector.cancel_order(order_id, order_info['symbol'])
            if cancel_response.get("status") == "success":
                message = f"‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:\nID: {order_id}\n–°–∏–º–≤–æ–ª: {order_info['symbol']}"
                await telegram_bot.send_message(message, chat_id)
                return

        await asyncio.sleep(30)

async def run_bot(chat_id):
    connector = get_exchange_connector()
    open_orders_info = {}

    symbols = ['SOL-USDT', 'ADA-USDT', 'AVAX-USDT', 'SUI-USDT', '1000PEPE-USDT', 'AAVE-USDT', 'WIF-USDT', 'UNI-USDT','BNB-USDT', 'DOGE-USDT']  # —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
    prev_trends = {symbol: None for symbol in symbols}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É

    bingx_ws = BingXWebSocket(API_KEY, SECRET_KEY, chat_id)
    threading.Thread(target=bingx_ws.start, daemon=True).start()

    while True:
        try:
            time_to_wait = get_time_to_next_candle()
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏: {time_to_wait:.2f} —Å–µ–∫")
            await asyncio.sleep(time_to_wait)

            for symbol in symbols:
                setup, new_trend = await generate_trading_setup(connector, symbol, prev_trends[symbol])
                prev_trends[symbol] = new_trend

                if setup is None:
                    print(f"–ù–µ—Ç —Å–µ—Ç–∞–ø–∞ –¥–ª—è {symbol}")
                    continue

                print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∞–ø –¥–ª—è {symbol}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                open_orders_for_symbol = {
                    k: v for k, v in open_orders_info.items()
                    if v['symbol'] == symbol
                }

                if open_orders_for_symbol:
                    print(f"‚ö†Ô∏è –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
                direction = setup['direction']
                entry_price = setup['entry_price']
                take_profit = setup['take_profit']
                stop_loss = setup['stop_loss']
                leverage = setup['leverage']
                quantity = MARGIN * leverage / entry_price

                print(f"üìà –û—Ä–¥–µ—Ä: {symbol} | {direction.upper()} | entry={entry_price} | qty={quantity:.4f} | SL={stop_loss} | TP={take_profit} | leverage={leverage}x")

                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ —Å retry
                if EXCHANGE == 'BingX':
                    position_side = "LONG" if direction == "buy" else "SHORT"
                    max_retries = 3
                    delay_seconds = 2

                    for attempt in range(1, max_retries + 1):
                       leverage_response = connector.set_leverage(symbol, leverage, position_side)
                       print(f"üõ† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {leverage_response}")

                       if leverage_response.get("code") == 0:
                           break  # —É—Å–ø–µ—à–Ω–æ
                       elif leverage_response.get("code") == 109500 and attempt < max_retries:
                           await asyncio.sleep(delay_seconds * attempt)  # —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∞—è—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞
                           continue
                       else:
                           message = f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {leverage_response}"
                           await telegram_bot.send_message(message, chat_id)
                           continue  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ


                # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                order_response = connector.place_order(
                    symbol=symbol,
                    price=entry_price,
                    quantity=quantity,
                    side=direction,
                    position_side="LONG" if direction == "buy" else "SHORT",
                    order_type="limit",
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    stop_loss_stopPrice=setup.get('stop_loss_stop_price')
                )

                print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç place_order: {order_response}")

                if order_response.get("status") == "success":
                    order_id = str(order_response.get("order_id"))
                    open_orders_info[order_id] = {
                        'symbol': symbol,
                        'open_time': time.time(),
                        'type': "LIMIT"
                    }

                    message = (
                        f"‚è≥ –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä:\n"
                        f"- –°–∏–º–≤–æ–ª: {symbol}\n"
                        f"- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction.upper()}\n"
                        f"- –¶–µ–Ω–∞: {entry_price}\n"
                        f"- –û–±—ä–µ–º: {quantity:.4f}\n"
                        f"- –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss}\n"
                        f"- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit}\n"
                        f"- –ü–ª–µ—á–æ: {leverage}x"
                    )
                    await telegram_bot.send_message(message, chat_id)

                    asyncio.create_task(
                        check_and_cancel_expired_order(
                            connector, order_id, open_orders_info[order_id], chat_id
                        )
                    )
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order_response}")
                    await telegram_bot.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:\n{order_response}", chat_id)

        except Exception as e:
            print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            await asyncio.sleep(60)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        chat_id = int(sys.argv[1])
    else:
        try:
            with open("chat_id.txt", "r") as f:
                chat_id = int(f.read().strip())
        except (FileNotFoundError, ValueError):
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å chat_id")
            sys.exit(1)

    asyncio.run(run_bot(chat_id))
