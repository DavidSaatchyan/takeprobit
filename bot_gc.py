import time
import asyncio
import sys
import threading
import json
import os
import math
from cex_connectors import get_exchange_connector
from strategy_gc import generate_trading_setup
from config import MARGIN, EXECUTION_TIME_LIMIT, EXCHANGE, API_KEY, SECRET_KEY
import telegram_bot
from ws_bingx import BingXWebSocket
from ws_binance import BinanceWebSocket
from filter_gc import get_filtered_symbols
from precision import round_price, round_step_size
from strategy_gc import USE_TRAILING_ORDERS
# –ò—Å–ø—Ä–∞–≤–ª—è—é –∏–º–ø–æ—Ä—Ç log_trade, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
try:
    from statistics import log_trade
except ImportError:
    def log_trade(data):
        print(f"[STAT] –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É: {data}")
import logging


def get_symbol_precision(symbol: str, connector=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if EXCHANGE == 'Binance':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API
        if connector and hasattr(connector, 'get_symbol_precision'):
            return connector.get_symbol_precision(symbol)
        else:
            # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {'price_precision': 2, 'quantity_precision': 3}
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {'price_precision': 2, 'quantity_precision': 3}



ORDER_CACHE_FILE = 'order_cache.json'

def get_time_to_next_candle():
    now = time.time()
    candle_interval = 60
    next_candle_time = ((int(now // candle_interval) + 1)) * candle_interval
    time_to_wait = next_candle_time - now + 2
    return time_to_wait

async def check_and_cancel_expired_order(connector, order_id, order_info, chat_id, open_orders_info):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    while order_id in open_orders_info:
        time_passed = time.time() - order_info['open_time']
        
        if time_passed > EXECUTION_TIME_LIMIT:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ API
                order_status = connector.get_order_status(order_id, order_info['symbol'])
                if not isinstance(order_status, dict):  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
                    logging.error(f"[Timeout] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {order_status}")
                    break
                    
                if order_status.get('status') in ('FILLED', 'PARTIALLY_FILLED'):
                    break
                    
                logging.info(f"[Timeout] –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä {order_id}")
                cancel_response = connector.cancel_order(order_id, order_info['symbol'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
                if (EXCHANGE == 'Binance' and cancel_response.get('status') == 'CANCELED') or \
                   (EXCHANGE == 'BingX' and cancel_response.get('code') == 0):
                    del open_orders_info[order_id]
                    break
                    
            except Exception as e:
                logging.error(f"[Timeout] –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)
                continue
                
        await asyncio.sleep(5)

# --- –û—Ç–∫–∞—Ç: cancel_all_trailing_orders —Å–Ω–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ symbol –∏ position_side ---
def cancel_all_trailing_orders(connector, symbol, position_side):
    print(f"üßπ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
    try:
        open_orders = connector.get_open_orders(symbol=symbol)
        orders = open_orders if isinstance(open_orders, list) else []
        trailing_orders = [order for order in orders if order.get("type") == "TRAILING_STOP_MARKET" and order.get("positionSide") == position_side]
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(trailing_orders)} —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
        for order in trailing_orders:
            order_id = order.get('orderId')
            print(f"üõë –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä {order_id} –¥–ª—è {symbol} (–ø–æ–∑–∏—Ü–∏—è: {position_side})")
            response = connector.cancel_order(order_id, symbol)
            is_success = response.get('status') == 'CANCELED' or response.get('code') == 0
            if is_success:
                print(f"‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

# --- –û—Ç–∫–∞—Ç: cancel_all_stop_orders —Å–Ω–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ symbol –∏ position_side ---
def cancel_all_stop_orders(connector, symbol, position_side):
    print(f"üßπ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö STOP_MARKET (SL) –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
    try:
        open_orders = connector.get_open_orders(symbol=symbol)
        orders = open_orders if isinstance(open_orders, list) else []
        stop_orders = [order for order in orders if order.get("type") in ("STOP_MARKET", "STOP_LIMIT") and order.get("positionSide") == position_side]
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(stop_orders)} STOP_MARKET/STOP_LIMIT –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
        for order in stop_orders:
            order_id = order.get('orderId')
            print(f"üõë –û—Ç–º–µ–Ω—è–µ–º SL-–æ—Ä–¥–µ—Ä {order_id} –¥–ª—è {symbol} (–ø–æ–∑–∏—Ü–∏—è: {position_side})")
            response = connector.cancel_order(order_id, symbol)
            is_success = response.get('status') == 'CANCELED' or response.get('code') == 0
            if is_success:
                print(f"‚úÖ SL-–æ—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SL-–æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ SL-–æ—Ä–¥–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

# --- –û—Ç–∫–∞—Ç: cancel_all_tp_orders —Å–Ω–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ symbol –∏ position_side ---
def cancel_all_tp_orders(connector, symbol, position_side):
    print(f"üßπ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö TP –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
    try:
        open_orders = connector.get_open_orders(symbol=symbol)
        orders = open_orders if isinstance(open_orders, list) else []
        tp_orders = [order for order in orders if order.get("type") in ("TAKE_PROFIT_MARKET", "LIMIT") and order.get("positionSide") == position_side]
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(tp_orders)} TP –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol} ({position_side})")
        for order in tp_orders:
            order_id = order.get('orderId')
            print(f"üõë –û—Ç–º–µ–Ω—è–µ–º TP-–æ—Ä–¥–µ—Ä {order_id} –¥–ª—è {symbol} (–ø–æ–∑–∏—Ü–∏—è: {position_side})")
            response = connector.cancel_order(order_id, symbol)
            is_success = response.get('status') == 'CANCELED' or response.get('code') == 0
            if is_success:
                print(f"‚úÖ TP-–æ—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã TP-–æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ TP-–æ—Ä–¥–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

def cancel_all_trailing_orders_by_symbol(connector, symbol):
    """–û—Ç–º–µ–Ω—è–µ—Ç –í–°–ï —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
    print(f"üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –í–°–ï–• —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
    try:
        open_orders = connector.get_open_orders(symbol=symbol)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –±–∏—Ä–∂–∏
        if EXCHANGE == 'BingX':
            orders = open_orders.get("data", {}).get("orders", [])
        else:  # Binance
            orders = open_orders if isinstance(open_orders, list) else []
        
        if not orders:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö –¥–ª—è {symbol}")
            return
            
        all_trailing_orders = [order for order in orders 
                              if order.get("type") == "TRAILING_STOP_MARKET"]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(all_trailing_orders)} —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω—ã")
        
        for order in all_trailing_orders:
            order_id = order.get('orderId')
            order_position_side = order.get('positionSide', 'UNKNOWN')
            print(f"üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä {order_id} –¥–ª—è {symbol} (–ø–æ–∑–∏—Ü–∏—è: {order_position_side})")
            response = connector.cancel_order(order_id, symbol)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
            is_success = False
            if EXCHANGE == 'BingX':
                is_success = response and response.get("code") == 0
            elif EXCHANGE == 'Binance':
                is_success = response.get('status') == 'CANCELED' or response.get('code') == 0
            
            if is_success:
                print(f"‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-–æ—Ä–¥–µ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()

def save_order_cache(order_id, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞ –≤ –∫—ç—à"""
    try:
        cache = {}
        if os.path.exists(ORDER_CACHE_FILE):
            with open(ORDER_CACHE_FILE, 'r', encoding='utf-8') as f:
                try:
                    cache = json.load(f)
                except json.JSONDecodeError:
                    cache = {}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–∏
        safe_data = {
            'symbol': data['symbol'],
            'direction': data['direction'],
            'size': str(data['size']),
            'entry_price': str(data['entry_price']),
            'stop_loss': str(data['stop_loss']),
            'take_profit': str(data.get('take_profit', '')),
            'position_side': data['position_side'],
            'leverage': str(data['leverage']),
            'entry_time': str(int(time.time() * 1000)),
            'tick_size': str(data.get('tick_size', '')),
            'step_size': str(data.get('step_size', ''))
        }
        
        cache[str(order_id)] = safe_data
        
        with open(ORDER_CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)
            f.flush()
            os.fsync(f.fileno())
    except Exception as e:
        logging.error(f"[Cache] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def run_bot(chat_id):
    logging.info(f"[run_bot] chat_id: {chat_id}")
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ API –∫–ª—é—á–∏: API_KEY={API_KEY[:10]}..., SECRET_KEY={SECRET_KEY[:10]}...")
    print(f"üè¢ –í—ã–±—Ä–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞: {EXCHANGE}")
    connector = get_exchange_connector()
    print(f"üîå –¢–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {type(connector).__name__}")
    open_orders_info = {}

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    symbols = get_filtered_symbols()
    if not symbols:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        await telegram_bot.send_direct_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", chat_id)
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
    await telegram_bot.send_direct_message(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å {len(symbols)} —Å–∏–º–≤–æ–ª–∞–º–∏:\n{', '.join(symbols)}", chat_id)
    
    prev_trends: dict[str, int | None] = {symbol: None for symbol in symbols}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É

    if EXCHANGE == 'Binance':
        ws = BinanceWebSocket(API_KEY, SECRET_KEY, chat_id)
        logging.info(f"[run_bot] BinanceWebSocket —Å–æ–∑–¥–∞–Ω —Å chat_id: {chat_id}")
    else:
        ws = BingXWebSocket(API_KEY, SECRET_KEY, chat_id)
    threading.Thread(target=ws.start, daemon=True).start()

    while True:
        try:
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ (filter_gc —Å–∞–º —Ä–µ—à–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å)
            new_symbols = get_filtered_symbols()
            if new_symbols != symbols:
                symbols = new_symbols
                print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤: {symbols}")
                await telegram_bot.send_direct_message(f"üîÑ –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω ({len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤):\n{', '.join(symbols)}", chat_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                new_prev_trends = {}
                for symbol in symbols:
                    if symbol in prev_trends:
                        new_prev_trends[symbol] = prev_trends[symbol]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–Ω–¥
                    else:
                        new_prev_trends[symbol] = None  # –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª
                prev_trends = new_prev_trends
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ª–æ–≤–∞—Ä—å —Ç—Ä–µ–Ω–¥–æ–≤: {list(prev_trends.keys())}")
            
            time_to_wait = get_time_to_next_candle()
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏: {time_to_wait:.2f} —Å–µ–∫")
            await asyncio.sleep(time_to_wait)

            for symbol in symbols:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª: {symbol}")
                setup, new_trend = await generate_trading_setup(connector, symbol, prev_trends[symbol])
                prev_trends[symbol] = new_trend

                if setup is None:
                    print(f"–ù–µ—Ç —Å–µ—Ç–∞–ø–∞ –¥–ª—è {symbol}")
                    continue

                print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∞–ø –¥–ª—è {symbol}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
                open_orders_for_symbol = {
                    k: v for k, v in open_orders_info.items()
                    if v['symbol'] == symbol
                }
                print(f"üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {symbol}: {open_orders_for_symbol}")

                if open_orders_for_symbol:
                    print(f"‚ö†Ô∏è –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
                if setup is not None:
                    direction = setup['direction']
                    entry_price = setup['entry_price']
                    take_profit = setup['take_profit']
                    stop_loss = setup['stop_loss']
                    leverage = setup['leverage']
                    quantity = MARGIN * leverage / entry_price
                else:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Binance (5 USDT)
                if EXCHANGE == 'Binance':
                    notional_value = quantity * entry_price
                    if notional_value < 5.0:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –º–∏–Ω–∏–º—É–º–∞
                        min_quantity = 5.0 / entry_price
                        quantity = min_quantity
                
                # –î–ª—è Binance –æ–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
                if EXCHANGE == 'Binance':
                    precision = get_symbol_precision(symbol, connector)
                    tick_size = precision.get('tick_size')
                    step_size = precision.get('step_size')
                    if tick_size is not None:
                        tick_size = float(tick_size)
                    else:
                        tick_size = 10 ** (-precision['price_precision'])
                    if step_size is not None:
                        step_size = float(step_size)
                    else:
                        step_size = 10 ** (-precision['quantity_precision'])
                    entry_price = round_price(entry_price, tick_size)
                    take_profit = round_price(take_profit, tick_size)
                    stop_loss = round_price(stop_loss, tick_size)
                    quantity = round_step_size(quantity, step_size)
                            # entry_price, take_profit, stop_loss —É–∂–µ –æ–∫—Ä—É–≥–ª–µ–Ω—ã —á–µ—Ä–µ–∑ round_price
        # quantity —É–∂–µ –æ–∫—Ä—É–≥–ª–µ–Ω —á–µ—Ä–µ–∑ round_step_size

                # –î–ª—è Binance ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ä–∂—É –ø–µ—Ä–µ–¥ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
                if EXCHANGE == 'Binance':
                    margin_type_resp = connector.set_margin_type(symbol, 'ISOLATED')
                    if margin_type_resp.get('code') == -4066:
                        print(f"[Binance] –ú–∞—Ä–∂–∞ –¥–ª—è {symbol} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ ISOLATED")
                    elif margin_type_resp.get('status') == 'ok':
                        print(f"[Binance] –ú–∞—Ä–∂–∞ –¥–ª—è {symbol} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ ISOLATED")

                position_side = "LONG" if direction == "buy" else "SHORT"
                leverage_response = connector.set_leverage(symbol, leverage, position_side)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂
                leverage_success = False
                if EXCHANGE == 'BingX':
                    leverage_success = leverage_response.get("code") == 0
                elif EXCHANGE == 'Binance':
                    # –î–ª—è Binance —É—Å–ø–µ—à–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
                    leverage_success = (
                        leverage_response.get('code') == 0 or 
                        leverage_response.get('status') == 'ok' or
                        (leverage_response.get('symbol') is not None and leverage_response.get('leverage') is not None)
                    )
                
                if not leverage_success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {leverage_response}")
                    await telegram_bot.send_direct_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞:\n{leverage_response}", chat_id)
                    continue

                print(f"üìà –û—Ä–¥–µ—Ä: {symbol} | {direction.upper()} | entry={entry_price} | qty={quantity:.4f} | SL={stop_loss} | TP={take_profit} | leverage={leverage}x")
                print(f"üöÄ –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}...")

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ TP stop price
                tp_stop_price = setup.get('take_profit_stop_price')
                if tp_stop_price is not None and tick_size is not None:
                    tp_stop_price = round_price(tp_stop_price, tick_size)
                order_response = connector.place_order(
                    symbol=symbol,
                    price=entry_price,
                    quantity=quantity,
                    side=direction,
                    position_side="LONG" if direction == "buy" else "SHORT",
                    order_type="limit",
                    take_profit=take_profit,
                    take_profit_stopPrice=tp_stop_price,
                )
                logging.info(f"[bot_gc] –û—Ç–≤–µ—Ç place_order: {order_response}")
                order_success = False
                order_id = None
                sl_order_id = None
                
                if EXCHANGE == 'BingX':
                    order_success = order_response.get("status") == "success"
                    order_id = str(order_response.get("order_id"))
                elif EXCHANGE == 'Binance':
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ ‚Äî —Å—Ä–∞–∑—É break/continue
                    if order_response.get('code') == -2019:
                        print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}")
                        await telegram_bot.send_direct_message(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è {symbol}. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞.", chat_id)
                        continue
                    elif order_response.get('code') == -1111:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ precision –¥–ª—è {symbol}: {order_response}")
                        await telegram_bot.send_direct_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ precision –¥–ª—è {symbol}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.", chat_id)
                        continue
                    elif order_response.get('code') == -4014:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ tick size –¥–ª—è {symbol}: {order_response}")
                        print(f"üîç –î–µ—Ç–∞–ª–∏: entry_price={entry_price}, tick_size={tick_size}")
                        await telegram_bot.send_direct_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ tick size –¥–ª—è {symbol}. –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º —Ü–µ–Ω—ã.", chat_id)
                        continue
                    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å orderId, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    order_success = order_response.get('orderId') is not None
                    order_id = str(order_response.get('orderId'))
                logging.info(f"[bot_gc] –û—Ç–≤–µ—Ç place_order: {order_response}")
                if order_success and order_id:
                    order_cache_data = setup.copy()
                    order_cache_data.update({
                        'symbol': symbol,
                        'direction': direction,
                        'entry_price': entry_price,
                        'size': quantity,
                        'order_type': "LIMIT",
                        'tick_size': tick_size,
                        'step_size': step_size,
                        'position_side': position_side,
                        'leverage': leverage,
                        'stop_loss': stop_loss,
                        'stop_loss_stop_price': setup.get('stop_loss_stop_price'),
                        'take_profit_stop_price': tp_stop_price,
                    })
                    if USE_TRAILING_ORDERS:
                        order_cache_data.update({
                            'trailing_sl_callback_rate': setup.get('trailing_sl_callback_rate'),
                            'trailing_sl_activation_price': setup.get('trailing_sl_activation_price'),
                            'trailing_tp_callback_rate': setup.get('trailing_tp_callback_rate'),
                            'trailing_tp_activation_price': setup.get('trailing_tp_activation_price'),
                        })
                    else:
                        order_cache_data.update({
                            'take_profit': setup.get('take_profit'),
                            'take_profit_stop_price': setup.get('take_profit_stop_price'),
                        })
                    print(f"[DEBUG] order_cache_data keys: {list(order_cache_data.keys())}")
                    save_order_cache(order_id, order_cache_data)
                    print(f"[DEBUG] order_id {order_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ order_cache.json")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å open_orders_info –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    open_orders_info[order_id] = {
                    'symbol': symbol,
                    'type': 'LIMIT',
                    'open_time': time.time(),
                    }

                    asyncio.create_task(
                        check_and_cancel_expired_order(
                            connector, order_id, open_orders_info[order_id], chat_id, open_orders_info
                        )
                    )

                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ (entry)
                    order_cache_data_log = order_cache_data.copy()
                    print("LOG_TRADE", symbol, direction, order_cache_data_log['entry_time'])
                    try:
                        log_trade(order_cache_data_log)
                        print(f"[STAT] –°–¥–µ–ª–∫–∞ {symbol} {direction} –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
                    except Exception as e:
                        print(f"[STAT] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order_response}")
                    await telegram_bot.send_direct_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:\n{order_response}", chat_id)
                    print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è {symbol}: {order_response}")

        except Exception as e:
            print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            await asyncio.sleep(60)

        # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã/–∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞

if __name__ == "__main__":
    if len(sys.argv) > 1:
        chat_id = int(sys.argv[1])
    else:
        try:
            with open("chat_id.txt", "r") as f:
                chat_id = int(f.read().strip())
        except (FileNotFoundError, ValueError):
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å chat_id")
            sys.exit(1)

    asyncio.run(run_bot(chat_id))
